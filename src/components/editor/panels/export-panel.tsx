import React, { useState } from "react";
import { useSelector } from "react-redux";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { saveAs } from "file-saver";
import { selectCurrentProject } from "@/redux/selectors/project-selectors";

/**
 * ExportPanel component props
 */
interface ExportPanelProps {
  onClose?: () => void;
}

/**
 * ExportPanel component
 * Handles exporting the project in different formats
 */
const ExportPanel: React.FC<ExportPanelProps> = ({ onClose }) => {
  const project = useSelector(selectCurrentProject);
  const [exportFormat, setExportFormat] = useState<"html" | "react" | "next">(
    "html"
  );
  const [includeStyles, setIncludeStyles] = useState(true);
  const [includeAssets, setIncludeAssets] = useState(true);
  const [minify, setMinify] = useState(false);
  const [exportName, setExportName] = useState(project?.name || "my-website");
  const [exportStatus, setExportStatus] = useState<
    "idle" | "exporting" | "success" | "error"
  >("idle");

  // Options specific to each format
  const [htmlOptions, setHtmlOptions] = useState({
    singleFile: true,
    inlineStyles: false,
    includeAnalytics: false,
  });

  const [reactOptions, setReactOptions] = useState({
    useTypeScript: true,
    useStyledComponents: false,
    useTailwind: true,
  });

  const [nextjsOptions, setNextjsOptions] = useState({
    appRouter: true,
    useTypeScript: true,
    includeAPI: false,
  });

  // Handle export action
  const handleExport = async () => {
    if (!project) return;

    setExportStatus("exporting");

    try {
      // This would connect to your project serializer in a real implementation
      // For now we'll simulate the export with a timeout

      setTimeout(() => {
        // Generate dummy content for demonstration
        let content;

        if (exportFormat === "html") {
          content = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${project.name}</title>
  ${includeStyles ? '<link rel="stylesheet" href="styles.css">' : ""}
</head>
<body>
  <!-- Generated by Website Builder -->
  <div id="root">
    <!-- Project content would be serialized here -->
    <h1>Example Export</h1>
  </div>
</body>
</html>`;
        } else if (exportFormat === "react") {
          content = `// Generated by Website Builder
import React from 'react';
${reactOptions.useStyledComponents ? "import styled from 'styled-components';" : ""}

function App() {
  return (
    <div className="app">
      {/* Project content would be serialized here */}
      <h1>Example Export</h1>
    </div>
  );
}

export default App;`;
        } else {
          content = `// Generated by Website Builder
${
  nextjsOptions.useTypeScript
    ? `export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <h1>Example Export</h1>
    </main>
  )
}`
    : `function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-between p-24">
      <h1>Example Export</h1>
    </main>
  )
}

export default Home;`
}`;
        }

        // Create blob and download
        const blob = new Blob([content], { type: "text/plain;charset=utf-8" });
        saveAs(
          blob,
          `${exportName}.${exportFormat === "html" ? "html" : exportFormat === "react" ? "jsx" : "tsx"}`
        );

        setExportStatus("success");

        // Reset status after 3 seconds
        setTimeout(() => {
          setExportStatus("idle");
        }, 3000);
      }, 1500);
    } catch (error) {
      console.error("Export failed:", error);
      setExportStatus("error");

      // Reset status after 3 seconds
      setTimeout(() => {
        setExportStatus("idle");
      }, 3000);
    }
  };

  if (!project) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Export Project</CardTitle>
          <CardDescription>No project is currently open</CardDescription>
        </CardHeader>
        <CardContent>
          <p className="text-center text-gray-500 my-8">
            Open a project to export its contents
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle>Export Project</CardTitle>
        <CardDescription>
          Export your project in different formats
        </CardDescription>
      </CardHeader>
      <CardContent>
        <Tabs
          defaultValue="html"
          value={exportFormat}
          onValueChange={(value) => setExportFormat(value as any)}
        >
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="html">HTML</TabsTrigger>
            <TabsTrigger value="react">React</TabsTrigger>
            <TabsTrigger value="next">Next.js</TabsTrigger>
          </TabsList>

          {/* HTML Export Options */}
          <TabsContent value="html" className="space-y-4 mt-4">
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="htmlSingleFile"
                  checked={htmlOptions.singleFile}
                  onCheckedChange={(checked) =>
                    setHtmlOptions((prev) => ({
                      ...prev,
                      singleFile: !!checked,
                    }))
                  }
                />
                <Label htmlFor="htmlSingleFile">
                  Export as single HTML file
                </Label>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="htmlInlineStyles"
                  checked={htmlOptions.inlineStyles}
                  onCheckedChange={(checked) =>
                    setHtmlOptions((prev) => ({
                      ...prev,
                      inlineStyles: !!checked,
                    }))
                  }
                />
                <Label htmlFor="htmlInlineStyles">Inline CSS styles</Label>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="htmlAnalytics"
                  checked={htmlOptions.includeAnalytics}
                  onCheckedChange={(checked) =>
                    setHtmlOptions((prev) => ({
                      ...prev,
                      includeAnalytics: !!checked,
                    }))
                  }
                />
                <Label htmlFor="htmlAnalytics">Include basic analytics</Label>
              </div>
            </div>
          </TabsContent>

          {/* React Export Options */}
          <TabsContent value="react" className="space-y-4 mt-4">
            <RadioGroup
              value={reactOptions.useTypeScript ? "typescript" : "javascript"}
              onValueChange={(value) =>
                setReactOptions((prev) => ({
                  ...prev,
                  useTypeScript: value === "typescript",
                }))
              }
            >
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="javascript" id="reactJs" />
                <Label htmlFor="reactJs">JavaScript</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="typescript" id="reactTs" />
                <Label htmlFor="reactTs">TypeScript</Label>
              </div>
            </RadioGroup>

            <div className="space-y-2 pt-2">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="reactStyledComponents"
                  checked={reactOptions.useStyledComponents}
                  onCheckedChange={(checked) =>
                    setReactOptions((prev) => ({
                      ...prev,
                      useStyledComponents: !!checked,
                    }))
                  }
                />
                <Label htmlFor="reactStyledComponents">
                  Use Styled Components
                </Label>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="reactTailwind"
                  checked={reactOptions.useTailwind}
                  onCheckedChange={(checked) =>
                    setReactOptions((prev) => ({
                      ...prev,
                      useTailwind: !!checked,
                    }))
                  }
                />
                <Label htmlFor="reactTailwind">Use Tailwind CSS</Label>
              </div>
            </div>
          </TabsContent>

          {/* Next.js Export Options */}
          <TabsContent value="next" className="space-y-4 mt-4">
            <RadioGroup
              value={nextjsOptions.appRouter ? "app" : "pages"}
              onValueChange={(value) =>
                setNextjsOptions((prev) => ({
                  ...prev,
                  appRouter: value === "app",
                }))
              }
            >
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="app" id="nextApp" />
                <Label htmlFor="nextApp">App Router</Label>
              </div>
              <div className="flex items-center space-x-2">
                <RadioGroupItem value="pages" id="nextPages" />
                <Label htmlFor="nextPages">Pages Router</Label>
              </div>
            </RadioGroup>

            <div className="space-y-2 pt-2">
              <div className="flex items-center space-x-2">
                <Checkbox
                  id="nextTs"
                  checked={nextjsOptions.useTypeScript}
                  onCheckedChange={(checked) =>
                    setNextjsOptions((prev) => ({
                      ...prev,
                      useTypeScript: !!checked,
                    }))
                  }
                />
                <Label htmlFor="nextTs">Use TypeScript</Label>
              </div>

              <div className="flex items-center space-x-2">
                <Checkbox
                  id="nextApi"
                  checked={nextjsOptions.includeAPI}
                  onCheckedChange={(checked) =>
                    setNextjsOptions((prev) => ({
                      ...prev,
                      includeAPI: !!checked,
                    }))
                  }
                />
                <Label htmlFor="nextApi">Include API routes</Label>
              </div>
            </div>
          </TabsContent>
        </Tabs>

        {/* Common Export Options */}
        <div className="space-y-4 mt-6 border-t pt-4">
          <div className="space-y-2">
            <Label htmlFor="exportName">Export name</Label>
            <Input
              id="exportName"
              value={exportName}
              onChange={(e) => setExportName(e.target.value)}
              placeholder="my-website"
            />
          </div>

          <div className="space-y-2">
            <div className="flex items-center space-x-2">
              <Checkbox
                id="includeStyles"
                checked={includeStyles}
                onCheckedChange={(checked) => setIncludeStyles(!!checked)}
              />
              <Label htmlFor="includeStyles">Include styles</Label>
            </div>

            <div className="flex items-center space-x-2">
              <Checkbox
                id="includeAssets"
                checked={includeAssets}
                onCheckedChange={(checked) => setIncludeAssets(!!checked)}
              />
              <Label htmlFor="includeAssets">Include assets</Label>
            </div>

            <div className="flex items-center space-x-2">
              <Checkbox
                id="minify"
                checked={minify}
                onCheckedChange={(checked) => setMinify(!!checked)}
              />
              <Label htmlFor="minify">Minify output</Label>
            </div>
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex justify-between">
        <Button variant="outline" onClick={onClose}>
          Cancel
        </Button>
        <Button onClick={handleExport} disabled={exportStatus === "exporting"}>
          {exportStatus === "idle" && "Export"}
          {exportStatus === "exporting" && "Exporting..."}
          {exportStatus === "success" && "✓ Exported"}
          {exportStatus === "error" && "✗ Failed"}
        </Button>
      </CardFooter>
    </Card>
  );
};

export default ExportPanel;
